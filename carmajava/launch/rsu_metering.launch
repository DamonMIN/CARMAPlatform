<?xml version="1.0"?>
<!--
  Copyright (C) 2018 LEIDOS.

  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy of
  the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations under
  the License.
-->
<!--
	rsu_metering.launch

  A the ros launch file for the launching the RSU Metering node for use with cooperative merge applications

  The launched nodes include the RSUMetering node, Message node, and OBU Driver node
-->
<launch>
  <!-- Constants -->
  <!-- Directory of Parameter Files -->
  <arg name="CARMA_DIR" default="$(find carma)" doc="The path of the package directory"/>
  <arg name="PARAM_DIR" default="$(arg CARMA_DIR)/launch/params" doc="Directory of yaml parameter files"/>
  <!-- Simulated Driver Arguments -->
  <!-- Directory of Simulation Files -->
  <arg name="DATA_DIR" default="$(arg CARMA_DIR)/mock_drivers/src/test/data" doc="Directory of driver simulation data files"/>
  <!-- Directory of Engineering Tools -->
  <arg name="SCRIPTS_DIR" default="$(arg CARMA_DIR)/../engineering_tools" doc="The directory containing scripts for execution"/>
  <!-- Simulation Usage -->
  <arg name="mock_dsrc"           default="false" doc="True if using a simulated dsrc driver"/>

  <!-- Data Files -->
  <arg name="dsrc_data_file"           default="$(arg DATA_DIR)/dsrc.csv" doc="Path for dsrc simulation data"/>
  <arg name="srx_controller_data_file" default="$(arg DATA_DIR)/srx_controller.csv" doc="Path for srx controller simulation data"/>
  <arg name="pinpoint_data_file"       default="$(arg DATA_DIR)/pinpoint_stationary.csv" doc="Path for pinpoint simulation data"/>

  <!-- Debug -->
  <!-- JVM Logging Options -->
  <arg name="log_config" default="/opt/carma/src/CarmaPlatform/carmajava/launch/params/log-config.properties" doc="The location of the logging configuration file"/>
  <arg name="JVM_LOG_OPTS" value="-Djava.util.logging.config.file=$(arg log_config)"/>
  <!-- Apply logging properties to all java nodes using JAVA_OPTS-->
  <env name="JAVA_OPTS" value="$(arg JVM_LOG_OPTS)"/>
  <!-- JVM Debug arguments -->
  <arg name="JVM_DEBUG_OPTS"    default="-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005" doc="Start rosjava node with these JVM arguments for debugging"/>
  <!-- Set to true to enable debugging on the specified node -->
  <arg name="debug_rsu_metering" default="false" doc="Set true to enable debugging on the RSU Metering node"/>
  <arg name="debug_interface_mgr"   default="false" doc="Set true to enable debugging on the Interface Manager node"/>
  <arg name="debug_msg_consumer"    default="false" doc="Set true to enable debugging on the Message Consumer node"/>
  <arg name="debug_mock_dsrc"      default="false" doc="Set true to enable debugging on the Mock dsrc Driver"/>
  <arg name="debug_mock_pinpoint"   default="false" doc="Set true to enable debugging on the Mock Pinpoint Driver"/>
  <arg name="debug_mock_srx_controller" default="false" doc="Set true to enable debugging on the Mock SRX Controller Driver"/>
  
  <!-- ROS Namespaces -->
  <arg name="TOP_NS"    default="saxton_cav" doc="CAV Prototype system namespace"/>
  <arg name="MSG_NS"    default="message" doc="Namespace of nodes in message package"/>
  <arg name="DRIVER_NS" default="drivers" doc="Namespace of nodes in drivers package"/>
  <arg name="RSU_NS" default="rsu" doc="Namespace of nodes in rsu metering package"/>
  <arg name="INTR_NS"   default="interface_manager" doc="Namespace of nodes in interface manager package"/>

  <!-- Launch Nodes -->
  <group ns="$(arg TOP_NS)">

    <!-- Set package path for use with relative file paths -->
    <param name="package_path" value="$(arg CARMA_DIR)"/>

    <!-- Generate log name configuration file -->
    <param name="log_name" type="str" command="$(arg SCRIPTS_DIR)/generate_log_name.sh"/>

    <!-- Drivers Package -->
    <group ns="$(arg DRIVER_NS)">

      <remap from="system_alert"
             to="/$(arg TOP_NS)/system_alert"/>

      <!-- DSRC OBU Driver Node -->
      <include unless="$(arg mock_dsrc)" file="$(find dsrc_driver)/launch/dsrc_node.launch"/>
      <!-- Simulated DSRC Driver Node -->
      <node if="$(arg mock_dsrc)" pkg="carma" type="mock_drivers" name="dsrc"
            args="gov.dot.fhwa.saxton.carma.mock_drivers.MockDriverNode">

        <env if="$(arg debug_mock_dsrc)" name="MOCK_DRIVERS_OPTS" value="$(arg JVM_DEBUG_OPTS)"/>

        <param name="simulated_driver" type="string" value="dsrc"/>
        <param name="data_file_path" type="string" value="$(arg dsrc_data_file)"/>
        <rosparam command="load" file="$(arg PARAM_DIR)/DSRCOBUParams.yaml"/>
      </node>

      <!-- PinPoint and Controller Drivers are required by interface manager so they must be included here -->
      <!-- Simulated PinPoint Driver Node -->
      <node pkg="carma" type="mock_drivers" name="pin_point_application"
            args="gov.dot.fhwa.saxton.carma.mock_drivers.MockDriverNode">

        <env if="$(arg debug_mock_pinpoint)" name="MOCK_DRIVERS_OPTS" value="$(arg JVM_DEBUG_OPTS)"/>

        <param name="simulated_driver" type="string" value="pinpoint"/>
        <param name="data_file_path" type="string" value="$(arg pinpoint_data_file)"/>
        <rosparam command="load" file="$(arg PARAM_DIR)/PinPointParams.yaml"/>
      </node>

      <!-- Simulated SRX Controller Driver Node -->
      <node pkg="carma" type="mock_drivers" name="srx_controller"
            args="gov.dot.fhwa.saxton.carma.mock_drivers.MockDriverNode">

        <env if="$(arg debug_mock_srx_controller)" name="MOCK_DRIVERS_OPTS" value="$(arg JVM_DEBUG_OPTS)"/>

        <param name="simulated_driver" type="string" value="srx_controller"/>
        <param name="data_file_path" type="string" value="$(arg srx_controller_data_file)"/>
        <rosparam command="load" file="$(arg PARAM_DIR)/SRXControllerParams.yaml"/>
      </node>
    </group>

    <!-- Interface Manager Package -->
    <group ns="$(arg INTR_NS)">

      <!-- Interface Manager Node -->
      <node pkg="carma" type="interfacemgr" name="interface_mgr"
            args="gov.dot.fhwa.saxton.carma.interfacemgr.InterfaceMgr" required="true">

        <env if="$(arg debug_interface_mgr)" name="INTERFACEMGR_OPTS" value="$(arg JVM_DEBUG_OPTS)"/>

        <rosparam command="load" file="$(arg PARAM_DIR)/InterfaceMgrParams.yaml"/>

        <!-- Overwrite the interface manager startup delay"-->
        <param name="driver_wait_time" type="int" value="3"/>

        <remap from="system_alert"
               to="/$(arg TOP_NS)/system_alert"/>
        <remap from="driver_discovery"
               to="/$(arg TOP_NS)/$(arg DRIVER_NS)/driver_discovery"/>
      </node>
    </group>

    <!-- Message Package -->
    <group ns="$(arg MSG_NS)">

      <!-- Message Consumer Node -->
      <node pkg="carma" type="message" name="message_consumer"
            args="gov.dot.fhwa.saxton.carma.message.MessageConsumer">

        <env if="$(arg debug_msg_consumer)" name="MESSAGE_OPTS" value="$(arg JVM_DEBUG_OPTS)"/>

        <rosparam command="load" file="$(arg PARAM_DIR)/MessageParams.yaml"/>

        <remap from="system_alert"
               to="/$(arg TOP_NS)/system_alert"/>
        <remap from="outgoing_mobility_request"
               to="/$(arg TOP_NS)/$(arg RSU_NS)/outgoing_mobility_request"/>
        <remap from="outgoing_mobility_response"
               to="/$(arg TOP_NS)/$(arg RSU_NS)/outgoing_mobility_response"/>
        <remap from="outgoing_mobility_operation"
               to="/$(arg TOP_NS)/$(arg RSU_NS)/outgoing_mobility_operation"/>
        <remap from="get_drivers_with_capabilities"
               to="/$(arg TOP_NS)/$(arg INTR_NS)/get_drivers_with_capabilities"/>
      </node>
    </group>

    <!-- RSU Metering Package -->
    <group ns="$(arg RSU_NS)">

      <!-- RSU Metering Node -->
      <node pkg="carma" type="rsumetering" name="rsu_meter"
            args="gov.dot.fhwa.saxton.carma.rsumetering.RSUMeterManager">

        <env if="$(arg debug_rsu_metering)" name="RSUMETERING_OPTS" value="$(arg JVM_DEBUG_OPTS)"/>
        
        <rosparam command="load" file="$(arg PARAM_DIR)/RSUMeteringParams.yaml"/>
        
        <remap from="system_alert"
               to="/$(arg TOP_NS)/system_alert"/>
        <remap from="incoming_bsm"
               to="/$(arg TOP_NS)/$(arg MSG_NS)/incoming_bsm"/>
        <remap from="incoming_mobility_request"
               to="/$(arg TOP_NS)/$(arg MSG_NS)/incoming_mobility_request"/>
        <remap from="incoming_mobility_response"
               to="/$(arg TOP_NS)/$(arg MSG_NS)/incoming_mobility_response"/>
        <remap from="incoming_mobility_operation"
               to="/$(arg TOP_NS)/$(arg MSG_NS)/incoming_mobility_operation"/>
               
      </node>
    </group>
    <!-- TODO Remove after TO 26 Demo is complete -->
    <node pkg="rosbag" type="record" name="rosbag_node"
      args="record -o /opt/carma/logs/ /saxton_cav/message/incoming_mobility_operation /saxton_cav/message/incoming_bsm /saxton_cav/message/incoming_mobility_request /saxton_cav/message/incoming_mobility_response /saxton_cav/guidance/outgoing_mobility_request /saxton_cav/guidance/outgoing_mobility_response /saxton_cav/guidance/outgoing_mobility_operation"
    />
  </group>
</launch>
