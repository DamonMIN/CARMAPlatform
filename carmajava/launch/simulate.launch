<?xml version="1.0"?>
<!--
  Copyright (C) 2018 LEIDOS.

  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy of
  the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations under
  the License.
-->
<!--
	saxton_cav_src.launch

  A the ros launch file for the STOL CAV Prototype ROS Network.
  Launches all the needed ros nodes and sets up the parameter server.
  Also sets up all static transforms used by tf2 within the system.

  Use:
  First delete the generated build/scripts folder in all java packages.
  roslaunch carma saxton_cav.launch
  After using source devel/setup.bash from workspace root.

  If not using simulated drivers they are activated using ros arguments as shown below.
  roslaunch carma saxton_cav.launch mock_can:=false can_data_file:=/path/to/file.csv
-->
<!-- To make this work there needs to be driver to return the api to interface manager -->
<launch>
  <!-- Constants -->
  <!-- Directory of Parameter Files -->
  <arg name="CARMA_DIR" default="$(find carma)" doc="The path of the package directory"/>
  <arg name="PARAM_DIR" default="$(arg CARMA_DIR)/launch/params" doc="Directory of yaml parameter files"/>
  <!-- Path to Unified Robot Description Format URDF file for loading static transforms -->
  <arg name="URDF_FILE" default="$(arg CARMA_DIR)/launch/urdf/saxton_cav_green_srx.urdf" doc="Path to the vehicle's URDF file"/>
  <!-- Simulated Driver Arguments -->
  <!-- Directory of Simulation Files -->
  <arg name="DATA_DIR" default="$(arg CARMA_DIR)/mock_drivers/src/test/data" doc="Directory of driver simulation data files"/>
  <!-- Directory of Engineering Tools -->
  <arg name="SCRIPTS_DIR" default="$(arg CARMA_DIR)/../engineering_tools" doc="The directory containing scripts for execution"/>

  <!-- Debug -->
  <!-- JVM Debug arguments -->
  <arg name="JVM_DEBUG_OPTS"    default="-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005" doc="Start rosjava node with these JVM arguments for debugging"/>
  <!-- JVM Logging Options -->
  <arg name="log_config" default="/opt/carma_1/src/CarmaPlatform/carmajava/launch/params/log-config.properties" doc="The location of the logging configuration file"/>
  <arg name="JVM_LOG_OPTS" value="-Djava.util.logging.config.file=$(arg log_config)"/>
  <!-- Apply logging properties to all java nodes using JAVA_OPTS-->
  <env name="JAVA_OPTS" value="$(arg JVM_LOG_OPTS)"/>
  <!-- Set to true to enable debugging on the specified node -->
  <arg name="debug_roadway_mgr" default="false" doc="Set true to enable debugging on the Roadway Manager node"/>
  <arg name="debug_guidance"        default="false" doc="Set true to enable debugging on the Guidance Main node"/>
  <arg name="debug_interface_mgr"   default="false" doc="Set true to enable debugging on the Interface Manager node"/>
  <arg name="debug_msg_consumer"    default="false" doc="Set true to enable debugging on the Message Consumer node"/>
  <arg name="debug_route"           default="false" doc="Set true to enable debugging on the Route node"/>

  <!-- ROS Namespaces -->
  <arg name="TOP_NS"    default="saxton_cav" doc="CAV Prototype system namespace"/>
  <arg name="GUIDE_NS"  default="guidance" doc="Namespace of nodes in guidance package"/>
  <arg name="MSG_NS"    default="message" doc="Namespace of nodes in message package"/>
  <arg name="SF_NS"     default="sensor_fusion" doc="Namespace of nodes in sensor fusion package"/>
  <arg name="RD_NS"     default="roadway" doc="Namespace of nodes in roadway package"/>
  <arg name="RT_NS"     default="route" doc="Namespace of nodes in route package"/>
  <arg name="DRIVER_NS" default="drivers" doc="Namespace of nodes in drivers package"/>
  <arg name="INTR_NS"   default="interface_manager" doc="Namespace of nodes in interface manager package"/>
  <arg name="UI_NS"     default="ui" doc="Namespace of parameters used by the ui and rosbridge"/>

  <!-- Needed Params -->
  <arg name="vehicle_id" doc="The bag file to be used to run this test"/>
  <!-- Setup Ros Bag -->
  <arg name="bag" doc="The bag file to be used to run this test"/>

  <!-- TODO Remove after TO 26 demo -->
  <arg name="use_rosbag" default="false" doc="Record a rosbag for the to 26 demo"/>

  <!-- Playback RosBag data -->
  <include file="$(arg CARMA_DIR)/launch/playback.launch">
    <arg name="bag" value="$(arg bag)"/>
    <arg name="vehicle_id" value="$(arg vehicle_id)"/>
    <arg name="all_topics" value="false"/>
    <arg name="topics" value="/saxton_cav/drivers/can0/received_messages /saxton_cav/drivers/can1/received_messages /saxton_cav/drivers/can1/sent_messages /saxton_cav/drivers/can2/received_messages /saxton_cav/drivers/driver_discovery /saxton_cav/drivers/dsrc/comms/inbound_binary_msg /saxton_cav/drivers/dsrc/comms/outbound_binary_msg /saxton_cav/drivers/dsrc/parameter_descriptions /saxton_cav/drivers/dsrc/parameter_updates /saxton_cav/drivers/pin_point_application/parameter_descriptions /saxton_cav/drivers/pin_point_application/parameter_updates /saxton_cav/drivers/pin_point_application/position/heading /saxton_cav/drivers/pin_point_application/position/nav_sat_fix /saxton_cav/drivers/pin_point_application/position/odometry /saxton_cav/drivers/pin_point_application/position/velocity /saxton_cav/drivers/srx_can/can/acc_engaged /saxton_cav/drivers/srx_can/can/accel /saxton_cav/drivers/srx_can/can/antilock_brakes_active /saxton_cav/drivers/srx_can/can/brake_lights /saxton_cav/drivers/srx_can/can/brake_position /saxton_cav/drivers/srx_can/can/engine_speed /saxton_cav/drivers/srx_can/can/fuel_flow /saxton_cav/drivers/srx_can/can/odometer /saxton_cav/drivers/srx_can/can/parking_brake /saxton_cav/drivers/srx_can/can/speed /saxton_cav/drivers/srx_can/can/stability_ctrl_active /saxton_cav/drivers/srx_can/can/stability_ctrl_enabled /saxton_cav/drivers/srx_can/can/throttle_position /saxton_cav/drivers/srx_can/can/traction_ctrl_active /saxton_cav/drivers/srx_can/can/traction_ctrl_enabled /saxton_cav/drivers/srx_can/can/transmission_state /saxton_cav/drivers/srx_can/can/turn_signal_state /saxton_cav/drivers/srx_can/parameter_descriptions /saxton_cav/drivers/srx_can/parameter_updates /saxton_cav/drivers/srx_controller/control/robot_status /saxton_cav/drivers/srx_objects/f_lrr/sensor/objects"/>
  </include>

  <!-- Launch Nodes -->
  <group ns="$(arg TOP_NS)">

    <!-- Set package path for use with relative file paths -->
    <param name="package_path" value="$(arg CARMA_DIR)"/>

    <!-- Generate log name configuration file -->
    <param name="log_name" type="str" command="$(arg SCRIPTS_DIR)/generate_log_name.sh"/>

    <!-- Load Vehicle Characteristics -->
    <rosparam command="load" file="$(arg PARAM_DIR)/HostVehicleParams.yaml"/>


    <!-- Interface Manager Package -->
    <group ns="$(arg INTR_NS)">

      <!-- Interface Manager Node -->
      <node pkg="carma" type="interfacemgr" name="interface_mgr"
            args="gov.dot.fhwa.saxton.carma.interfacemgr.InterfaceMgr" required="true">

        <env if="$(arg debug_interface_mgr)" name="INTERFACEMGR_OPTS" value="$(arg JVM_DEBUG_OPTS)"/>

        <rosparam command="load" file="$(arg PARAM_DIR)/InterfaceMgrParams.yaml"/>

        <remap from="system_alert"
               to="/$(arg TOP_NS)/system_alert"/>
        <remap from="driver_discovery"
               to="/$(arg TOP_NS)/$(arg DRIVER_NS)/driver_discovery"/>
      </node>
    </group>

    <!-- Sensor Fusion Package -->
    <group ns="$(arg SF_NS)">

      <!-- Sensor Fusion Node -->
      <node pkg="sensor_fusion" type="sensor_fusion_node" name="sensor_fusion">

        <rosparam command="load" file="$(arg PARAM_DIR)/SensorFusion.yaml"/>

        <remap from="~filtered"
               to="filtered"/>
        <remap from="system_alert"
               to="/$(arg TOP_NS)/system_alert"/>
        <remap from="bsm"
               to="/$(arg TOP_NS)/$(arg MSG_NS)/incoming_bsm"/>
        <remap from="get_drivers_with_capabilities"
               to="/$(arg TOP_NS)/$(arg INTR_NS)/get_drivers_with_capabilities"/>
      </node>
    </group>

    <!-- Roadway Package -->
    <group ns="$(arg RD_NS)">

      <!-- Roadway Manager Node -->
      <node pkg="carma" type="roadway" name="roadway_manager"
            args="gov.dot.fhwa.saxton.carma.roadway.RoadwayManager">

        <env if="$(arg debug_roadway_mgr)" name="ROADWAY_OPTS" value="$(arg JVM_DEBUG_OPTS)"/>

        <rosparam command="load" file="$(arg PARAM_DIR)/RoadwayManagerParams.yaml"/>

        <remap from="system_alert"
               to="/$(arg TOP_NS)/system_alert"/>
        <remap from="map"
               to="/$(arg TOP_NS)/$(arg MSG_NS)/map"/>
        <remap from="heading"
               to="/$(arg TOP_NS)/$(arg SF_NS)/filtered/heading"/>
        <remap from="nav_sat_fix"
               to="/$(arg TOP_NS)/$(arg SF_NS)/filtered/nav_sat_fix"/>
        <remap from="odometry"
               to="/$(arg TOP_NS)/$(arg SF_NS)/filtered/odometry"/> 
        <remap from="objects"
               to="/$(arg TOP_NS)/$(arg SF_NS)/filtered/tracked_objects"/>
        <remap from="velocity"
               to="/$(arg TOP_NS)/$(arg SF_NS)/filtered/velocity"/>
        <remap from="get_transform"
               to="/$(arg TOP_NS)/$(arg RD_NS)/get_transform"/>
        <remap from="route_state"
              to="/$(arg TOP_NS)/$(arg RT_NS)/route_state"/>
        <remap from="route"
              to="/$(arg TOP_NS)/$(arg RT_NS)/route"/>
      </node>

      <!-- Transform Server Node -->
      <node pkg="carma_transform_server" type="carma_transform_server_node" name="transform_server">
        <remap from="system_alert"
               to="/$(arg TOP_NS)/system_alert"/>
      </node>
    </group>

    <!-- Message Package -->
    <group ns="$(arg MSG_NS)">

      <!-- Message Consumer Node -->
      <node pkg="carma" type="message" name="message_consumer"
            args="gov.dot.fhwa.saxton.carma.message.MessageConsumer">

        <env if="$(arg debug_msg_consumer)" name="MESSAGE_OPTS" value="$(arg JVM_DEBUG_OPTS)"/>

        <rosparam command="load" file="$(arg PARAM_DIR)/MessageParams.yaml"/>

        <remap from="system_alert"
               to="/$(arg TOP_NS)/system_alert"/>
        <remap from="outgoing_bsm"
               to="/$(arg TOP_NS)/$(arg GUIDE_NS)/bsm"/>
        <remap from="outgoing_mobility_request"
               to="/$(arg TOP_NS)/$(arg GUIDE_NS)/outgoing_mobility_request"/>
        <remap from="outgoing_mobility_path"
               to="/$(arg TOP_NS)/$(arg GUIDE_NS)/outgoing_mobility_path"/>
        <remap from="outgoing_mobility_response"
               to="/$(arg TOP_NS)/$(arg GUIDE_NS)/outgoing_mobility_response"/>
        <remap from="outgoing_mobility_operation"
               to="/$(arg TOP_NS)/$(arg GUIDE_NS)/outgoing_mobility_operation"/>
        <remap from="get_drivers_with_capabilities"
               to="/$(arg TOP_NS)/$(arg INTR_NS)/get_drivers_with_capabilities"/>
      </node>
    </group>

    <!-- TODO Remove after TO 26 Demo is complete -->
    <!-- <node pkg="rosbag" type="record" name="rosbag_node"
      args="record -o /opt/carma/logs/ /saxton_cav/sensor_fusion/filtered/nav_sat_fix /saxton_cav/sensor_fusion/filtered/heading /saxton_cav/drivers/srx_can/can/speed /saxton_cav/sensor_fusion/filtered/velocity /saxton_cav/sensor_fusion/filtered/acceleration /saxton_cav/drivers/srx_objects/f_lrr/sensor/objects /saxton_cav/drivers/srx_can/can/brake_position /saxton_cav/guidance/plugins/controlling_plugins /saxton_cav/drivers/srx_controller/control/cmd_speed /saxton_cav/message/incoming_mobility_request /saxton_cav/message/incoming_mobility_response /saxton_cav/message/incoming_mobility_operation /saxton_cav/message/incoming_mobility_path /saxton_cav/guidance/outgoing_mobility_request /saxton_cav/guidance/outgoing_mobility_response /saxton_cav/guidance/outgoing_mobility_operation /saxton_cav/guidance/outgoing_mobility_path /saxton_cav/message/incoming_bsm"
      if="$(arg use_rosbag)" /> -->
    <node pkg="rosbag" type="record" name="rosbag_node"
      args="record -o /opt/carma/logs/ -a"
      if="$(arg use_rosbag)" />
  </group>
</launch>
